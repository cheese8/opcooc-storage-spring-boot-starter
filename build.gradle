import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/gradle-plugin" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
    }
}

description = "opcooc-storage-spring-boot-starter - 简单对象存储客户端驱动程序"

allprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.hierynomus.license'

    group = 'com.opcooc'
    version = project.opcoocVersion

    sourceCompatibility = project.javaSourceCompatibility
    targetCompatibility = project.javaTargetCompatibility

    tasks.withType(JavaCompile) {
        options.encoding = project.encoding
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    jar {
        afterEvaluate {
            manifest {
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Bundle-DocURL': 'http://www.opcooc.com/'
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
            }
        }
    }

    license {
        encoding = project.encoding
        header = rootProject.file("license.txt")
        includes(["**/*.java"])
        exclude "**/test/**/*.java"
        exclude "**/*Test.java"
        mapping "java", "SLASHSTAR_STYLE"
        ignoreFailures = true
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    dependencies {
        api "com.amazonaws:aws-java-sdk-s3:$project.awsJavaSdkS3Version"
        implementation platform("org.springframework.boot:spring-boot-dependencies:$project.springBootVersion")

        api "org.springframework.boot:spring-boot-autoconfigure:$project.springBootVersion"

        annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:$project.springBootVersion"
        implementation "org.springframework.boot:spring-boot-autoconfigure-processor:$project.springBootVersion"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$project.springBootVersion"
        implementation "org.springframework.boot:spring-boot-configuration-processor:$project.springBootVersion"

        implementation "org.springframework.boot:spring-boot-starter-aop:$project.springBootVersion"
        implementation "org.springframework.boot:spring-boot-starter-web:$project.springBootVersion"
        implementation "org.springframework.boot:spring-boot-starter-actuator:$project.springBootVersion"

        compileOnly "org.projectlombok:lombok:$project.lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$project.lombokVersion"

        implementation "org.slf4j:slf4j-api:$project.slf4jVersion"
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding project.encoding
                charSet project.encoding
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    test {
        dependsOn("cleanTest", "generatePomFileForMavenJavaPublication")
        useJUnitPlatform()
        exclude("**/storage/**")
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }


    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    publishing {

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username project.sonatypeUsername
                    password project.sonatypePassword
                }
            }
        }

        publications {

            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = "opcooc-storage-spring-boot-starter"
                    packaging 'jar'
                    description = 'opcooc-storage-spring-boot-starter simple object storage client driver'
                    url = 'https://github.com/opcooc/opcooc-storage-spring-boot-starter'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'opcooc'
                            name = 'shenqicheng'
                            email = '1317225796@qq.com'
                        }
                    }

                    scm {
                        url = 'https://github.com/opcooc/opcooc-storage-spring-boot-starter'
                        connection = 'scm:git:https://github.com/opcooc/opcooc-storage-spring-boot-starter'
                        developerConnection = 'scm:git:git@github.com:opcooc/opcooc-storage-spring-boot-starter.git'
                    }

                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}
